package com.marine.ViteLaRecette.dao;

import java.util.List;
import java.util.ArrayList;


import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;
import com.marine.ViteLaRecette.dao.Quantite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table QUANTITE.
 */
public class QuantiteDao extends AbstractDao<Quantite, Long> {

	public static final String TABLENAME = "QUANTITE";

	/**
	 * Properties of entity Quantite.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property Quantite = new Property(1, Float.class,
				"quantite", false, "QUANTITE");
		public final static Property Suffixe = new Property(2, String.class,
				"suffixe", false, "SUFFIXE");
		public final static Property RecetteId = new Property(3, long.class,
				"recetteId", false, "RECETTE_ID");
		public final static Property IngredientId = new Property(4, Long.class,
				"ingredientId", false, "INGREDIENT_ID");
		public final static Property MesureId = new Property(5, Long.class,
				"mesureId", false, "MESURE_ID");
	};

	private DaoSession daoSession;

	private Query<Quantite> recette_QuantDeRecQuery;
	private Query<Quantite> ingredient_QuantDeIngQuery;

	public QuantiteDao(DaoConfig config) {
		super(config);
	}

	public QuantiteDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'QUANTITE' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'QUANTITE' REAL," + // 1: quantite
				"'SUFFIXE' TEXT," + // 2: suffixe
				"'RECETTE_ID' INTEGER NOT NULL ," + // 3: recetteId
				"'INGREDIENT_ID' INTEGER," + // 4: ingredientId
				"'MESURE_ID' INTEGER);"); // 5: mesureId
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'QUANTITE'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Quantite entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		Float quantite = entity.getQuantite();
		if (quantite != null) {
			stmt.bindDouble(2, quantite);
		}

		String suffixe = entity.getSuffixe();
		if (suffixe != null) {
			stmt.bindString(3, suffixe);
		}
		stmt.bindLong(4, entity.getRecetteId());

		Long ingredientId = entity.getIngredientId();
		if (ingredientId != null) {
			stmt.bindLong(5, ingredientId);
		}

		Long mesureId = entity.getMesureId();
		if (mesureId != null) {
			stmt.bindLong(6, mesureId);
		}
	}

	@Override
	protected void attachEntity(Quantite entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Quantite readEntity(Cursor cursor, int offset) {
		Quantite entity = new Quantite(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // quantite
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // suffixe
				cursor.getLong(offset + 3), // recetteId
				cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // ingredientId
				cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // mesureId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Quantite entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setQuantite(cursor.isNull(offset + 1) ? null : cursor
				.getFloat(offset + 1));
		entity.setSuffixe(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setRecetteId(cursor.getLong(offset + 3));
		entity.setIngredientId(cursor.isNull(offset + 4) ? null : cursor
				.getLong(offset + 4));
		entity.setMesureId(cursor.isNull(offset + 5) ? null : cursor
				.getLong(offset + 5));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Quantite entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Quantite entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/**
	 * Internal query to resolve the "quantDeRec" to-many relationship of
	 * Recette.
	 */
	public synchronized List<Quantite> _queryRecette_QuantDeRec(long recetteId) {
		if (recette_QuantDeRecQuery == null) {
			QueryBuilder<Quantite> queryBuilder = queryBuilder();
			queryBuilder.where(Properties.RecetteId.eq(recetteId));
			recette_QuantDeRecQuery = queryBuilder.build();
		} else {
			recette_QuantDeRecQuery.setParameter(0, recetteId);
		}
		return recette_QuantDeRecQuery.list();
	}

	/**
	 * Internal query to resolve the "quantDeIng" to-many relationship of
	 * Ingredient.
	 */
	public synchronized List<Quantite> _queryIngredient_QuantDeIng(
			Long ingredientId) {
		if (ingredient_QuantDeIngQuery == null) {
			QueryBuilder<Quantite> queryBuilder = queryBuilder();
			queryBuilder.where(Properties.IngredientId.eq(ingredientId));
			ingredient_QuantDeIngQuery = queryBuilder.build();
		} else {
			ingredient_QuantDeIngQuery.setParameter(0, ingredientId);
		}
		return ingredient_QuantDeIngQuery.list();
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession.getRecetteDao()
					.getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T1", daoSession.getIngredientDao()
					.getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T2", daoSession.getMesureDao()
					.getAllColumns());
			builder.append(" FROM QUANTITE T");
			builder.append(" LEFT JOIN RECETTE T0 ON T.'RECETTE_ID'=T0.'_id'");
			builder.append(" LEFT JOIN INGREDIENT T1 ON T.'INGREDIENT_ID'=T1.'_id'");
			builder.append(" LEFT JOIN MESURE T2 ON T.'MESURE_ID'=T2.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected Quantite loadCurrentDeep(Cursor cursor, boolean lock) {
		Quantite entity = loadCurrent(cursor, 0, lock);
		int offset = getAllColumns().length;

		Recette recette = loadCurrentOther(daoSession.getRecetteDao(), cursor,
				offset);
		if (recette != null) {
			entity.setRecette(recette);
		}
		offset += daoSession.getRecetteDao().getAllColumns().length;

		Ingredient ingredient = loadCurrentOther(daoSession.getIngredientDao(),
				cursor, offset);
		entity.setIngredient(ingredient);
		offset += daoSession.getIngredientDao().getAllColumns().length;

		Mesure mesure = loadCurrentOther(daoSession.getMesureDao(), cursor,
				offset);
		entity.setMesure(mesure);

		return entity;
	}

	public Quantite loadDeep(Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}

		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();

		String[] keyArray = new String[] { key.toString() };
		Cursor cursor = db.rawQuery(sql, keyArray);

		try {
			boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException(
						"Expected unique result, but count was "
								+ cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/**
	 * Reads all available rows from the given cursor and returns a list of new
	 * ImageTO objects.
	 */
	public List<Quantite> loadAllDeepFromCursor(Cursor cursor) {
		int count = cursor.getCount();
		List<Quantite> list = new ArrayList<Quantite>(count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<Quantite> loadDeepAllAndCloseCursor(Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<Quantite> queryDeep(String where, String... selectionArg) {
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
