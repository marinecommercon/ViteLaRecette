package com.marine.ViteLaRecette.dao;

import java.util.List;


import de.greenrobot.dao.DaoException;
import com.marine.ViteLaRecette.dao.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table INGREDIENT.
 */
public class Ingredient {

	private Long id;
	private String nom;
	private Integer favoris;
	private long categorieId;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient IngredientDao myDao;

	private Categorie categorie;
	private Long categorie__resolvedKey;

	private List<Quantite> quantDeIng;

	public Ingredient() {
	}

	public Ingredient(Long id) {
		this.id = id;
	}

	public Ingredient(Long id, String nom, Integer favoris, long categorieId) {
		this.id = id;
		this.nom = nom;
		this.favoris = favoris;
		this.categorieId = categorieId;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getIngredientDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getNom() {
		return nom;
	}

	public void setNom(String nom) {
		this.nom = nom;
	}

	public Integer getFavoris() {
		return favoris;
	}

	public void setFavoris(Integer favoris) {
		this.favoris = favoris;
	}

	public long getCategorieId() {
		return categorieId;
	}

	public void setCategorieId(long categorieId) {
		this.categorieId = categorieId;
	}

	/** To-one relationship, resolved on first access. */
	public Categorie getCategorie() {
		if (categorie__resolvedKey == null
				|| !categorie__resolvedKey.equals(categorieId)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			CategorieDao targetDao = daoSession.getCategorieDao();
			categorie = targetDao.load(categorieId);
			categorie__resolvedKey = categorieId;
		}
		return categorie;
	}

	public void setCategorie(Categorie categorie) {
		if (categorie == null) {
			throw new DaoException(
					"To-one property 'categorieId' has not-null constraint; cannot set to-one to null");
		}
		this.categorie = categorie;
		categorieId = categorie.getId();
		categorie__resolvedKey = categorieId;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<Quantite> getQuantDeIng() {
		if (quantDeIng == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			QuantiteDao targetDao = daoSession.getQuantiteDao();
			quantDeIng = targetDao._queryIngredient_QuantDeIng(id);
		}
		return quantDeIng;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetQuantDeIng() {
		quantDeIng = null;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}
