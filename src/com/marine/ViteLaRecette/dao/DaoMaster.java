package com.marine.ViteLaRecette.dao;


import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.IdentityScopeType;
import com.marine.ViteLaRecette.dao.CategorieDao;
import com.marine.ViteLaRecette.dao.IngredientDao;
import com.marine.ViteLaRecette.dao.ListeDao;
import com.marine.ViteLaRecette.dao.MesureDao;
import com.marine.ViteLaRecette.dao.QuantiteDao;
import com.marine.ViteLaRecette.dao.RecetteDao;
import com.marine.ViteLaRecette.dao.UrDao;
import com.marine.ViteLaRecette.dao.UstensileDao;
import com.marine.ViteLaRecette.dao.VocabulaireDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 3): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
	public static final int SCHEMA_VERSION = 3;

	/** Creates underlying database table using DAOs. */
	public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
		IngredientDao.createTable(db, ifNotExists);
		CategorieDao.createTable(db, ifNotExists);
		UstensileDao.createTable(db, ifNotExists);
		MesureDao.createTable(db, ifNotExists);
		RecetteDao.createTable(db, ifNotExists);
		QuantiteDao.createTable(db, ifNotExists);
		ListeDao.createTable(db, ifNotExists);
		UrDao.createTable(db, ifNotExists);
		VocabulaireDao.createTable(db, ifNotExists);
	}

	/** Drops underlying database table using DAOs. */
	public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
		IngredientDao.dropTable(db, ifExists);
		CategorieDao.dropTable(db, ifExists);
		UstensileDao.dropTable(db, ifExists);
		MesureDao.dropTable(db, ifExists);
		RecetteDao.dropTable(db, ifExists);
		QuantiteDao.dropTable(db, ifExists);
		ListeDao.dropTable(db, ifExists);
		UrDao.dropTable(db, ifExists);
		VocabulaireDao.dropTable(db, ifExists);
	}

	public static abstract class OpenHelper extends SQLiteOpenHelper {

		public OpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory, SCHEMA_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			Log.i("greenDAO", "Creating tables for schema version "
					+ SCHEMA_VERSION);
			createAllTables(db, false);
		}
	}

	/** WARNING: Drops all table on Upgrade! Use only during development. */
	public static class DevOpenHelper extends OpenHelper {
		public DevOpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory);
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			Log.i("greenDAO", "Upgrading schema from version " + oldVersion
					+ " to " + newVersion + " by dropping all tables");
			dropAllTables(db, true);
			onCreate(db);
		}
	}

	public DaoMaster(SQLiteDatabase db) {
		super(db, SCHEMA_VERSION);
		registerDaoClass(IngredientDao.class);
		registerDaoClass(CategorieDao.class);
		registerDaoClass(UstensileDao.class);
		registerDaoClass(MesureDao.class);
		registerDaoClass(RecetteDao.class);
		registerDaoClass(QuantiteDao.class);
		registerDaoClass(ListeDao.class);
		registerDaoClass(UrDao.class);
		registerDaoClass(VocabulaireDao.class);
	}

	public DaoSession newSession() {
		return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
	}

	public DaoSession newSession(IdentityScopeType type) {
		return new DaoSession(db, type, daoConfigMap);
	}

}
