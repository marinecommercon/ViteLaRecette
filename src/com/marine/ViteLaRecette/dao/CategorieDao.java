package com.marine.ViteLaRecette.dao;


import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import com.marine.ViteLaRecette.dao.Categorie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table CATEGORIE.
 */
public class CategorieDao extends AbstractDao<Categorie, Long> {

	public static final String TABLENAME = "CATEGORIE";

	/**
	 * Properties of entity Categorie.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property Nom = new Property(1, String.class, "nom",
				false, "NOM");
		public final static Property Favoris = new Property(2, Integer.class,
				"favoris", false, "FAVORIS");
	};

	private DaoSession daoSession;

	public CategorieDao(DaoConfig config) {
		super(config);
	}

	public CategorieDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'CATEGORIE' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'NOM' TEXT," + // 1: nom
				"'FAVORIS' INTEGER);"); // 2: favoris
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'CATEGORIE'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Categorie entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String nom = entity.getNom();
		if (nom != null) {
			stmt.bindString(2, nom);
		}

		Integer favoris = entity.getFavoris();
		if (favoris != null) {
			stmt.bindLong(3, favoris);
		}
	}

	@Override
	protected void attachEntity(Categorie entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Categorie readEntity(Cursor cursor, int offset) {
		Categorie entity = new Categorie(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nom
				cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // favoris
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Categorie entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setNom(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setFavoris(cursor.isNull(offset + 2) ? null : cursor
				.getInt(offset + 2));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Categorie entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Categorie entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
