package com.marine.ViteLaRecette.dao;

import java.util.List;


import de.greenrobot.dao.DaoException;
import com.marine.ViteLaRecette.dao.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CATEGORIE.
 */
public class Categorie {

	private Long id;
	private String nom;
	private Integer favoris;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient CategorieDao myDao;

	private List<Ingredient> ingreDeCat;

	public Categorie() {
	}

	public Categorie(Long id) {
		this.id = id;
	}

	public Categorie(Long id, String nom, Integer favoris) {
		this.id = id;
		this.nom = nom;
		this.favoris = favoris;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getCategorieDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getNom() {
		return nom;
	}

	public void setNom(String nom) {
		this.nom = nom;
	}

	public Integer getFavoris() {
		return favoris;
	}

	public void setFavoris(Integer favoris) {
		this.favoris = favoris;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<Ingredient> getIngreDeCat() {
		if (ingreDeCat == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			IngredientDao targetDao = daoSession.getIngredientDao();
			ingreDeCat = targetDao._queryCategorie_IngreDeCat(id);
		}
		return ingreDeCat;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetIngreDeCat() {
		ingreDeCat = null;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}
