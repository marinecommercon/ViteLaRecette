package com.marine.ViteLaRecette.dao;

import java.util.List;
import java.util.ArrayList;


import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;
import com.marine.ViteLaRecette.dao.Ingredient;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table INGREDIENT.
 */
public class IngredientDao extends AbstractDao<Ingredient, Long> {

	public static final String TABLENAME = "INGREDIENT";

	/**
	 * Properties of entity Ingredient.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property Nom = new Property(1, String.class, "nom",
				false, "NOM");
		public final static Property Favoris = new Property(2, Integer.class,
				"favoris", false, "FAVORIS");
		public final static Property CategorieId = new Property(3, long.class,
				"categorieId", false, "CATEGORIE_ID");
	};

	private DaoSession daoSession;

	private Query<Ingredient> categorie_IngreDeCatQuery;

	public IngredientDao(DaoConfig config) {
		super(config);
	}

	public IngredientDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'INGREDIENT' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'NOM' TEXT," + // 1: nom
				"'FAVORIS' INTEGER," + // 2: favoris
				"'CATEGORIE_ID' INTEGER NOT NULL );"); // 3: categorieId
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'INGREDIENT'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Ingredient entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String nom = entity.getNom();
		if (nom != null) {
			stmt.bindString(2, nom);
		}

		Integer favoris = entity.getFavoris();
		if (favoris != null) {
			stmt.bindLong(3, favoris);
		}
		stmt.bindLong(4, entity.getCategorieId());
	}

	@Override
	protected void attachEntity(Ingredient entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Ingredient readEntity(Cursor cursor, int offset) {
		Ingredient entity = new Ingredient(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nom
				cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // favoris
				cursor.getLong(offset + 3) // categorieId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Ingredient entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setNom(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setFavoris(cursor.isNull(offset + 2) ? null : cursor
				.getInt(offset + 2));
		entity.setCategorieId(cursor.getLong(offset + 3));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Ingredient entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Ingredient entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/**
	 * Internal query to resolve the "ingreDeCat" to-many relationship of
	 * Categorie.
	 */
	public synchronized List<Ingredient> _queryCategorie_IngreDeCat(
			long categorieId) {
		if (categorie_IngreDeCatQuery == null) {
			QueryBuilder<Ingredient> queryBuilder = queryBuilder();
			queryBuilder.where(Properties.CategorieId.eq(categorieId));
			categorie_IngreDeCatQuery = queryBuilder.build();
		} else {
			categorie_IngreDeCatQuery.setParameter(0, categorieId);
		}
		return categorie_IngreDeCatQuery.list();
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession.getCategorieDao()
					.getAllColumns());
			builder.append(" FROM INGREDIENT T");
			builder.append(" LEFT JOIN CATEGORIE T0 ON T.'CATEGORIE_ID'=T0.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected Ingredient loadCurrentDeep(Cursor cursor, boolean lock) {
		Ingredient entity = loadCurrent(cursor, 0, lock);
		int offset = getAllColumns().length;

		Categorie categorie = loadCurrentOther(daoSession.getCategorieDao(),
				cursor, offset);
		if (categorie != null) {
			entity.setCategorie(categorie);
		}

		return entity;
	}

	public Ingredient loadDeep(Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}

		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();

		String[] keyArray = new String[] { key.toString() };
		Cursor cursor = db.rawQuery(sql, keyArray);

		try {
			boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException(
						"Expected unique result, but count was "
								+ cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/**
	 * Reads all available rows from the given cursor and returns a list of new
	 * ImageTO objects.
	 */
	public List<Ingredient> loadAllDeepFromCursor(Cursor cursor) {
		int count = cursor.getCount();
		List<Ingredient> list = new ArrayList<Ingredient>(count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<Ingredient> loadDeepAllAndCloseCursor(Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<Ingredient> queryDeep(String where, String... selectionArg) {
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
