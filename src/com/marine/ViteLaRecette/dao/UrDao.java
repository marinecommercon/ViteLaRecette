package com.marine.ViteLaRecette.dao;

import java.util.List;
import java.util.ArrayList;


import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import com.marine.ViteLaRecette.dao.Ur;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table UR.
 */
public class UrDao extends AbstractDao<Ur, Void> {

	public static final String TABLENAME = "UR";

	/**
	 * Properties of entity Ur.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Four = new Property(0, Integer.class,
				"four", false, "FOUR");
		public final static Property Poele = new Property(1, Integer.class,
				"poele", false, "POELE");
		public final static Property Mo = new Property(2, Integer.class, "mo",
				false, "MO");
		public final static Property Mixeur = new Property(3, Integer.class,
				"mixeur", false, "MIXEUR");
		public final static Property Plaque = new Property(4, Integer.class,
				"plaque", false, "PLAQUE");
		public final static Property RecetteId = new Property(5, Long.class,
				"recetteId", false, "RECETTE_ID");
	};

	private DaoSession daoSession;

	public UrDao(DaoConfig config) {
		super(config);
	}

	public UrDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'UR' (" + //
				"'FOUR' INTEGER," + // 0: four
				"'POELE' INTEGER," + // 1: poele
				"'MO' INTEGER," + // 2: mo
				"'MIXEUR' INTEGER," + // 3: mixeur
				"'PLAQUE' INTEGER," + // 4: plaque
				"'RECETTE_ID' INTEGER);"); // 5: recetteId
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UR'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Ur entity) {
		stmt.clearBindings();

		Integer four = entity.getFour();
		if (four != null) {
			stmt.bindLong(1, four);
		}

		Integer poele = entity.getPoele();
		if (poele != null) {
			stmt.bindLong(2, poele);
		}

		Integer mo = entity.getMo();
		if (mo != null) {
			stmt.bindLong(3, mo);
		}

		Integer mixeur = entity.getMixeur();
		if (mixeur != null) {
			stmt.bindLong(4, mixeur);
		}

		Integer plaque = entity.getPlaque();
		if (plaque != null) {
			stmt.bindLong(5, plaque);
		}

		Long recetteId = entity.getRecetteId();
		if (recetteId != null) {
			stmt.bindLong(6, recetteId);
		}
	}

	@Override
	protected void attachEntity(Ur entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public Ur readEntity(Cursor cursor, int offset) {
		Ur entity = new Ur( //
				cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // four
				cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // poele
				cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // mo
				cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // mixeur
				cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // plaque
				cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // recetteId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Ur entity, int offset) {
		entity.setFour(cursor.isNull(offset + 0) ? null : cursor
				.getInt(offset + 0));
		entity.setPoele(cursor.isNull(offset + 1) ? null : cursor
				.getInt(offset + 1));
		entity.setMo(cursor.isNull(offset + 2) ? null : cursor
				.getInt(offset + 2));
		entity.setMixeur(cursor.isNull(offset + 3) ? null : cursor
				.getInt(offset + 3));
		entity.setPlaque(cursor.isNull(offset + 4) ? null : cursor
				.getInt(offset + 4));
		entity.setRecetteId(cursor.isNull(offset + 5) ? null : cursor
				.getLong(offset + 5));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(Ur entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(Ur entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession.getRecetteDao()
					.getAllColumns());
			builder.append(" FROM UR T");
			builder.append(" LEFT JOIN RECETTE T0 ON T.'RECETTE_ID'=T0.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected Ur loadCurrentDeep(Cursor cursor, boolean lock) {
		Ur entity = loadCurrent(cursor, 0, lock);
		int offset = getAllColumns().length;

		Recette recette = loadCurrentOther(daoSession.getRecetteDao(), cursor,
				offset);
		entity.setRecette(recette);

		return entity;
	}

	public Ur loadDeep(Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}

		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();

		String[] keyArray = new String[] { key.toString() };
		Cursor cursor = db.rawQuery(sql, keyArray);

		try {
			boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException(
						"Expected unique result, but count was "
								+ cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/**
	 * Reads all available rows from the given cursor and returns a list of new
	 * ImageTO objects.
	 */
	public List<Ur> loadAllDeepFromCursor(Cursor cursor) {
		int count = cursor.getCount();
		List<Ur> list = new ArrayList<Ur>(count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<Ur> loadDeepAllAndCloseCursor(Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<Ur> queryDeep(String where, String... selectionArg) {
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
