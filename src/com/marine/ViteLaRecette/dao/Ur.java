package com.marine.ViteLaRecette.dao;


import de.greenrobot.dao.DaoException;
import com.marine.ViteLaRecette.dao.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table UR.
 */
public class Ur {

	private Integer four;
	private Integer poele;
	private Integer mo;
	private Integer mixeur;
	private Integer plaque;
	private Long recetteId;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient UrDao myDao;

	private Recette recette;
	private Long recette__resolvedKey;

	public Ur() {
	}

	public Ur(Integer four, Integer poele, Integer mo, Integer mixeur,
			Integer plaque, Long recetteId) {
		this.four = four;
		this.poele = poele;
		this.mo = mo;
		this.mixeur = mixeur;
		this.plaque = plaque;
		this.recetteId = recetteId;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getUrDao() : null;
	}

	public Integer getFour() {
		return four;
	}

	public void setFour(Integer four) {
		this.four = four;
	}

	public Integer getPoele() {
		return poele;
	}

	public void setPoele(Integer poele) {
		this.poele = poele;
	}

	public Integer getMo() {
		return mo;
	}

	public void setMo(Integer mo) {
		this.mo = mo;
	}

	public Integer getMixeur() {
		return mixeur;
	}

	public void setMixeur(Integer mixeur) {
		this.mixeur = mixeur;
	}

	public Integer getPlaque() {
		return plaque;
	}

	public void setPlaque(Integer plaque) {
		this.plaque = plaque;
	}

	public Long getRecetteId() {
		return recetteId;
	}

	public void setRecetteId(Long recetteId) {
		this.recetteId = recetteId;
	}

	/** To-one relationship, resolved on first access. */
	public Recette getRecette() {
		if (recette__resolvedKey == null
				|| !recette__resolvedKey.equals(recetteId)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			RecetteDao targetDao = daoSession.getRecetteDao();
			recette = targetDao.load(recetteId);
			recette__resolvedKey = recetteId;
		}
		return recette;
	}

	public void setRecette(Recette recette) {
		this.recette = recette;
		recetteId = recette == null ? null : recette.getId();
		recette__resolvedKey = recetteId;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}
