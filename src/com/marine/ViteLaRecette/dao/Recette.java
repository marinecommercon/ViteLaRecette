package com.marine.ViteLaRecette.dao;

import java.util.List;


import de.greenrobot.dao.DaoException;
import com.marine.ViteLaRecette.dao.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table RECETTE.
 */
public class Recette {

	private Long id;
	private String nom;
	private String type;
	private Integer cuisson;
	private Integer preparation;
	private String description;
	private Integer prix;
	private Integer difficulte;
	private Integer score;
	private Integer nombre;
	private Integer favoris;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient RecetteDao myDao;

	private List<Quantite> quantDeRec;

	public Recette() {
	}

	public Recette(Long id) {
		this.id = id;
	}

	public Recette(Long id, String nom, String type, Integer cuisson,
			Integer preparation, String description, Integer prix,
			Integer difficulte, Integer score, Integer nombre, Integer favoris) {
		this.id = id;
		this.nom = nom;
		this.type = type;
		this.cuisson = cuisson;
		this.preparation = preparation;
		this.description = description;
		this.prix = prix;
		this.difficulte = difficulte;
		this.score = score;
		this.nombre = nombre;
		this.favoris = favoris;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getRecetteDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getNom() {
		return nom;
	}

	public void setNom(String nom) {
		this.nom = nom;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public Integer getCuisson() {
		return cuisson;
	}

	public void setCuisson(Integer cuisson) {
		this.cuisson = cuisson;
	}

	public Integer getPreparation() {
		return preparation;
	}

	public void setPreparation(Integer preparation) {
		this.preparation = preparation;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Integer getPrix() {
		return prix;
	}

	public void setPrix(Integer prix) {
		this.prix = prix;
	}

	public Integer getDifficulte() {
		return difficulte;
	}

	public void setDifficulte(Integer difficulte) {
		this.difficulte = difficulte;
	}

	public Integer getScore() {
		return score;
	}

	public void setScore(Integer score) {
		this.score = score;
	}

	public Integer getNombre() {
		return nombre;
	}

	public void setNombre(Integer nombre) {
		this.nombre = nombre;
	}

	public Integer getFavoris() {
		return favoris;
	}

	public void setFavoris(Integer favoris) {
		this.favoris = favoris;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<Quantite> getQuantDeRec() {
		if (quantDeRec == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			QuantiteDao targetDao = daoSession.getQuantiteDao();
			quantDeRec = targetDao._queryRecette_QuantDeRec(id);
		}
		return quantDeRec;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetQuantDeRec() {
		quantDeRec = null;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}
