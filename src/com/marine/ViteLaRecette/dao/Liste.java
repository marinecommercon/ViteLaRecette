package com.marine.ViteLaRecette.dao;


import de.greenrobot.dao.DaoException;
import com.marine.ViteLaRecette.dao.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LISTE.
 */
public class Liste {

	private Long id;
	private Integer nombre;
	private Long recetteId;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient ListeDao myDao;

	private Recette recette;
	private Long recette__resolvedKey;

	public Liste() {
	}

	public Liste(Long id) {
		this.id = id;
	}

	public Liste(Long id, Integer nombre, Long recetteId) {
		this.id = id;
		this.nombre = nombre;
		this.recetteId = recetteId;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getListeDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Integer getNombre() {
		return nombre;
	}

	public void setNombre(Integer nombre) {
		this.nombre = nombre;
	}

	public Long getRecetteId() {
		return recetteId;
	}

	public void setRecetteId(Long recetteId) {
		this.recetteId = recetteId;
	}

	/** To-one relationship, resolved on first access. */
	public Recette getRecette() {
		if (recette__resolvedKey == null
				|| !recette__resolvedKey.equals(recetteId)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			RecetteDao targetDao = daoSession.getRecetteDao();
			recette = targetDao.load(recetteId);
			recette__resolvedKey = recetteId;
		}
		return recette;
	}

	public void setRecette(Recette recette) {
		this.recette = recette;
		recetteId = recette == null ? null : recette.getId();
		recette__resolvedKey = recetteId;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}
